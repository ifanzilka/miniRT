# R 1200 1200
# A 0.6 0,0,0

# c 0,0,0  0,0.1,1    60

# #l 0,2,4    0.6    255,0,0
# l 2,1,0 0.4     255,255,255
# l 1,4,4 0.2     255,255,255

# sp 2,2,0     2   0,255,255  0.011 500
# sp 0,-1,3     2   255,0,0   0.02 100
# sp 2,0,4      2   0,255,0   0.03 10
# sp -2,0,4     2   0,0,255   0.04 500
# sp 0,-5001.5,0    10000 255,255,0   0.01 1000
# sp -1,-1,2    0.4    255,255,255    

# R 800 800
# A 0.8 0,0,0
# c 0,0,-6 0,0,1  60
# #l 0,2,4    0.6    255,0,0
# l 2,1,0 0.4    0,255,255
# l 1,4,4 0.4     255,0,255
# sp 2,-1,-5     2   0,255,255    0.01            500
# sp 2,2,0     2   0,255,255  0.01            500
# sp 0,-1,3     2   255,0,0   0.01            500
# sp 2,0,4      2   0,255,0   0.01            500
# sp -2,0,4     2   0,0,255   0.01            500
# sp 3,4,0     2   0,255,255  0.01            500
# sp 0,-5001,0    10000 255,255,0 0.01            500
# sp -1,-1,2    0.4    255,255,255        0.01            500

# R 800 800
# A 0.45 0,0,0
# c 0,0,-6 -1,0,0  60
# l 2,1,0 0.4     255,255,255
# l 1,4,4 0.2     255,255,255
# sp 2,-1,-5     2   0,255,255
# sp 2,2,0     2   0,255,255
# sp 0,-1,3     2   255,0,0
# sp 2,0,4      2   0,255,0
# sp -2,0,4     2   0,0,255
# sp 3,4,0     2   0,255,255
# sp 0,-5001,0    10000 255,255,0
# sp -1,-1,2    0.4    255,255,255

# R 600 600
# A 0.45 0,0,0
# c 0,0,-3 0,0,1 60
# l 2,1,-6 0.4     150,150,150
# sp 0,-1,3 2 0,0,255 0.01            500
# sp 2,0,4 2 0,255,0  0.01            500
# sp -2,1.5,4 2 200,0,200 0.01            500
# sp -2,0,4 2 255,0,0 0.01            500
# sp 0.5,2,4 2 0,255,255  0.01            500
# sp -0.5,2,4 2 200,100,200   0.01            500
# sp 0,2,4 2 0,0,0    0.01            500
# sp 2,1.5,4 2 100,200,100    0.01            500
# sp 0,-5001,0    10000 255,255,0 0.01            500
# sp -0.5,-1,0 0.5 255,255,255    0.01            500
# sp 0.5,-1,0 0.5 255,255,255 0.01            500

# R 1200 1200
# A 0.42 0,0,0
# c 0,1,-5  0.0,0.1,1    60
# c 0,1,-5  0.3,0.1,1    70
# #l 0,2,4    0.6    255,0,0
# l 2,1,0 0.2     255,255,255
# l 1,4,4 0.3     255,255,255
# l 0,-2,-5 1.0     0,0,255
# l -5,-2,0 1.0     255,0,0
# #l -1,-1,1 0.2     255,0,0
# #l -2,0,1 0.5     0,0,255
# sp 0,-1,3     2   255,0,0   0.01            500
# sp 2,0,4      2   0,255,0   0.01            500
# sp -2,0,4     2   0,0,255   0.01            500
# sp 0,-5001.5,0    10000 255,255,0   0.01            500
# sp -1,-1,2    0.4    255,255,255    0.01            500
# cy -1,-1,1   -1,0,0.8        1 2       0,0,0
# tr 1,-2,0.5     3,-2,0.5     2,1,1.5     255,255,255
# tr 1,-2,0.5     1,-2,2.5     2,1,1.5      255,255,255
# tr 1,-2,2.5      3,-2,2.5     2,1,1.5     255,255,255
# tr 3,-2,0.5      3,-2,2.5     2,1,1.5     255,255,255


# R 800 800
# A 0.2 255,255,255
# c 0,0,-1 0,0,1 60
# l 2,1,0 0.6 255,0,0
# l -2,1,0 0.6 0,255,0
# l 0,1,0 0.6 0,0,255
# sp 0,-1,2 2 255,0,0
# sp 0,1,5 2 200,0,200
# sp 2,0,4 2 0,255,0
# sp -2,0,4 2 0,0,225
# sp 0,-3001,0 6000 255,255,0

R 400 400
A 0.42 0,0,0
c 0,1,-5  0.0,0.1,1    60
c 0,1,-5  0.3,0.1,1    70
#l 0,2,4    0.6    255,0,0
l 0,1,-10 0.4     255,255,255
#l 1,4,4 0.3     255,255,255
#l -1,-1,1 0.5     0,255,0
#l -5,-2,0 0.4     255,255,255
# #l -1,-1,1 0.2     255,0,0
# #l -2,0,1 0.5     0,0,255
# sp 0,-1,3     2   255,0,0
# sp 2,0,4      2   0,255,0
# sp -2,0,4     2   0,0,255  0.6 300
# #sp 0,-5001.5,0    10000 100,255,255
# sp -1,-1,2    0.4    100,255,255
# cy -1,-1,1   -1,0,0.8        1 2       0,0,0    -1 300
# tr 1,-2,0.5     3,-2,0.5     2,1,1.5     255,255,255     0.6 300
# tr 1,-2,0.5     1,-2,2.5     2,1,1.5      255,255,255    0.6 300
# tr 1,-2,2.5      3,-2,2.5     2,1,1.5     255,255,255    0.6 300
# tr 3,-2,0.5      3,-2,2.5     2,1,1.5     255,255,255    0.6 300
#sp -2,-3,3     2   0,255,0
sq 2,-3.5,3         0.57,0.57,0.0         5                            222,203,202 0.5 300
#l  2,2,3     0.8         0,255,0    
pl 0,-5,0 0,-1,0  255,0,0  0.2 300

# R 1000 1000
# A   0.15        255,255,255
# c           0,0,-6         0,0,1     60
# c           0,0,0            0.0,0,1     60
# c           0,0,0            0.0,0.2,1     90
# l           2,1,0           0.4                 0,255,0
# l           0,1,0           0.4                 0,0,255
# l           -2,1,0          0.4                 255,0,0
# sp              0,-1,3      2           255,255,255
# sp              -2,0,4      2           255,255,255
# sp              2,0,4      2           255,255,255
# sp              0,-5001,0   10000       255,255,255
# pl -5,1,0 1,0,0 255,255,255
# pl 5,1,0 1,0,0 255,255,255


static void	init(t_all *all)
{
	my_mlx_init(all);
	if (!(all->win->win = mlx_new_window(all->win->mlx, all->win->width,
	all->win->height, "cub3D")))
		error_handler(MAP_PARS, 0);
	my_image_init(all);
	my_plr_init(all);
	sprites_init(all);
	read_text(all);
	draw_all0(all);
}
void		create_file_header(t_all *all, int fd)
{
	unsigned char	*file_header;
	int				i;
	int				file_size;
	file_header = (unsigned char *)malloc(14 * sizeof(unsigned char));
	i = 0;
	while (i < 14)
	{
		file_header[i] = (unsigned char)(0);
		i++;
	}
	file_size = 14 + 40 + (4 * all->win->width * all->win->height);
	file_header[0] = (unsigned char)('B');
	file_header[1] = (unsigned char)('M');
	file_header[2] = (unsigned char)(file_size % 256);
	file_header[3] = (unsigned char)(file_size / 256 % 256);
	file_header[4] = (unsigned char)(file_size / 256 / 256 % 256);
	file_header[5] = (unsigned char)(file_size / 256 / 256 / 256);
	file_header[10] = (unsigned char)(14 + 40);
	write(fd, file_header, 14);
	free(file_header);
}
void		create_info_header(t_all *all, int fd)
{
	int				i;
	unsigned char	*file_header;
	i = 0;
	file_header = (unsigned char *)malloc(40 * sizeof(unsigned char));
	while (i < 40)
	{
		file_header[i] = (unsigned char)(0);
		i++;
	}
	file_header[0] = (unsigned char)(40);
	file_header[4] = (unsigned char)(all->win->width % 256);
	file_header[5] = (unsigned char)(all->win->width / 256 % 256);
	file_header[6] = (unsigned char)(all->win->width / 256 / 256 % 256);
	file_header[7] = (unsigned char)(all->win->width / 256 / 256 / 256);
	file_header[8] = (unsigned char)(all->win->height % 256);
	file_header[9] = (unsigned char)(all->win->height / 256 % 256);
	file_header[10] = (unsigned char)(all->win->height / 256 / 256 % 256);
	file_header[11] = (unsigned char)(all->win->height / 256 / 256 / 256);
	file_header[12] = (unsigned char)(1);
	file_header[14] = (unsigned char)(32);
	write(fd, file_header, 40);
	free(file_header);
}
void		create_image_to_file(t_all *all)
{
	int y;
	int line_length;
	line_length = all->win->width * all->img->bits_per_pixel / 8;
	y = all->win->height;
	while (0 <= y)
	{
		write(all->fd, (unsigned char *)(all->img->addr +
		y * all->img->line_length), line_length);
		y--;
	}
}
void		screen_save(t_all *all)
{
	all->fd = open("screen.bmp", O_CREAT | O_WRONLY | O_TRUNC, 0655);
	init(all);
	create_file_header(all, all->fd);
	create_info_header(all, all->fd);
	create_image_to_file(all);
	close(all->fd);
	write(1, "Image generate!\n", 17);
	my_exit();
}